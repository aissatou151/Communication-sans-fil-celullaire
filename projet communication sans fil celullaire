% ---------------------------------PHASE I---------------------------------------------------------------
% Afficher le profil de puissance
figure;%cree une nouvelle figure 
plot(x, z);% trace les donnees originales en fonction de x 
xlabel('Distance (m)');
ylabel('Puissance reçue (dBm)');
title('Profil de puissance');

-------------------------------------------

% Afficher les variations lentes 
windowSize=50;  % declare une variable windowSize pour representer la taille de la fenetre on lui attribue 50
z_slow = movmean(z, windowSize); % Cette ligne calcule la moyenne mobile de la série de données z en utilisant une fenêtre de taille windowSize.
hold on;
plot(x, z_slow, 'r'); %trace les données lissées z_slow sur le graphique en utilisant la variable x comme axe des abscisses. Les données sont tracées en rouge ('r').
legend('Puissance initiale', 'Variations lentes');


z_fast = z - z_slow;% calcule les variations rapides en soustrayant les donnees lissees des donnees originales
figure; % cree une nouvelle figure pour le prochain graphique
plot(x, z_fast); %trace les variations rapides en fonction de x
title('Variations rapides');
xlabel('Distance (m)');
ylabel('Variations de Puissance (dBm)');

-------------------------------------------------------------------

c = 3e8; % Vitesse de la lumière en m/s
freq = 37.2e9; % Fréquence en Hz
lambda = c / freq; % Longueur d'onde en mètres
segment_length = 20 * lambda; % Longueur du segment en mètres


% Supposons que x et z soient déjà chargés et contiennent les données de mesure
% Calculez la distance totale couverte par les mesures
total_distance = max(x) - min(x);
points_per_segment = round(segment_length / (total_distance / length(x)));

gradient = [];
variance = [];

% Parcourir les données par segment de 20 lambda
for start_idx = 1:points_per_segment:length(x)
    end_idx = start_idx + points_per_segment - 1;
    if end_idx > length(x)
        end_idx = length(x);
    end

    % Extraire le segment
    segment_x = x(start_idx:end_idx);
    segment_z = z(start_idx:end_idx);

    % Calcul de la régression linéaire
    p = polyfit(segment_x, segment_z, 1);
    gradient(end+1) = p(1); % Le gradient de perte est la pente

    % Calcul de la variance pour le segment
    variance(end+1) = var(segment_z);

    % Tracer le segment et la ligne de régression
    figure;
    plot(segment_x, segment_z, 'b.'); % Données du segment
    hold on;
    plot(segment_x, polyval(p, segment_x), 'r-'); % Ligne de régression
    title(sprintf('Segment starting at %d m', round(segment_x(1))));
    xlabel('Distance (m)');
    ylabel('Puissance reçue (dBm)');
    legend('Données réelles', 'Régression linéaire');
end
---------------------------------------------------------------------

% Afficher les résultats globaux
disp('Gradient des pertes (n) pour chaque segment:');
disp(gradient);
disp('Variance (σ²) pour chaque segment:');
disp(variance);
%-----------------------------PHASE II--------------------------------------------------------------------------

 % Paramètres initiaux
f = 893e6; % fréquence en Hz
c = 3e8; % vitesse de la lumière en m/s
lambda = c / f; % longueur d'onde en mètres
ht =1.5; hr = 1.5; % hauteur des antennes en mètres
R = -1; % Coefficient de réflexion pour le plancher

% Création d'une matrice de distances
d = 1:0.01:9; % Distance de 1m à 9m avec des incrémentations de 1cm

% Calcul de la puissance reçue normalisée pour chaque distance
Pr = zeros(size(d)); % Initialisation du vecteur de puissance reçue
for i = 1:length(d)
    d0 = sqrt((d(i))^2 + (ht + hr)^2); % distance LOS
    d1 = sqrt((d(i))^2 + (ht - hr)^2); % distance réfléchie
    delta_d = d0 - d1; % différence de trajet

    % Champ électrique reçu
    e = sqrt(60*pi) * (exp(-1i * 2 * pi * d0 / lambda) / d0 + R * exp(-1i * 2 * pi * d1 / lambda) / d1);
    Pr(i) = 20 * log10(abs(e)); % Puissance reçue en dB
end

% Affichage du profil de puissance
plot(d, Pr);
xlabel('Distance (m)');
ylabel('Puissance reçue (dB)');
title('Profil de puissance reçue normalisée');
grid on;
% Paramètres initiaux
f = 893e6; % fréquence en Hz
c = 3e8; % vitesse de la lumière en m/s
lambda = c / f; % longueur d'onde en mètres
ht =1.5; hr = 1.5; % hauteur des antennes en mètres
R = -1; % Coefficient de réflexion pour le plancher

% Création d'une matrice de distances
d = 1:0.01:9; % Distance de 1m à 9m avec des incrémentations de 1cm

% Calcul de la puissance reçue normalisée pour chaque distance
Pr = zeros(size(d)); % Initialisation du vecteur de puissance reçue
for i = 1:length(d)
    d0 = sqrt((d(i))^2 + (ht + hr)^2); % distance LOS
    d1 = sqrt((d(i))^2 + (ht - hr)^2); % distance réfléchie
    delta_d = d0 - d1; % différence de trajet

    % Champ électrique reçu
    e = sqrt(60*pi) * (exp(-1i * 2 * pi * d0 / lambda) / d0 + R * exp(-1i * 2 * pi * d1 / lambda) / d1);
    Pr(i) = 20 * log10(abs(e)); % Puissance reçue en dB
end

% Affichage du profil de puissance
plot(d, Pr);
xlabel('Distance (m)');
ylabel('Puissance reçue (dB)');
title('Profil de puissance reçue normalisée');
grid on;

% ...

% Pour n = 1 et n = 3
for n = [1, 3]
    Pr_n = zeros(size(d)); % Initialisation du vecteur de puissance reçue
    for i = 1:length(d)
        % ...
        psi = atan2(hr, d(i)); % angle de l'antenne avec la distance

        % Gain de l'antenne directionnelle
        G = cos(psi)^n;

        % Champ électrique reçu avec le gain de l'antenne
        e = G * sqrt(60*pi) * (exp(-1i * 2 * pi * d0 / lambda) / d0 + R * exp(-1i * 2 * pi * d1 / lambda) / d1);
        Pr_n(i) = 20 * log10(abs(e)); % Puissance reçue en dB
    end
    
    % Ajout du tracé au graphique existant
    hold on;
    plot(d, Pr_n, 'DisplayName', ['n=' num2str(n)]);
end

% ...% ...

epsilon = 12; % Constante diélectrique du plancher pour les calculs TM et TE

% Coefficients de réflexion pour les murs
% À compléter avec la loi de Snell pour calculer l'angle de réflexion et l'incidence

% ...

% Utiliser les coefficients R calculés dans la boucle de calcul de Pr
